package com.zx.class01;

public interface JieKou {
    // 接口中成员的特点:
    // 成员变量: 只能是常量,默认修饰符:public static final

    // 构造方法:没有
    // 成员方法: 只能是抽象方法, 默认修饰符:public abstract(JDK7以前:接口中只能定义抽象方法。)

    // 接口和类之间的关系
    /* 类和类的关系: 继承关系，只能单继承，不能多继承，但是可以多层继承
       类和接口的关系: 实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口
       接口和接口的关系: 继承关系，可以单继承，也可以多继承


    /*
    JDK8 接口中新增的方法

    1. 允许在接口中定义默认方法，需要使用关键字default修饰作用:解决接口升级的问题
        a.接口中默认方法的定义格式:
                格式: public default返回值类型方法名(参数列表){}
                范例: public default void show(){ }
        b. 接口中默认方法的注意事项:
        默认方法不是抽象方法，所以不强制被重写。但是如果被重写，重写的时候去掉default关键字
        public可以省略，default不能省略

        c. 如果实现了多个接口，多个接口中存在相同名字的默认方法，子类就必须对该方法进行重写

     2. 允许在接口中定义定义静态方法，需要用static修饰
        接口中静态方法的定义格式:
            格式: public static返回值类型方法名(参数列表){ }
            范例: public static void show(){ }

        接口中静态方法的注意事项:
            静态方法只能通过接口名调用，不能通过实现类名或者对象名调用
            public可以省略 static不能省略
     */

    /* JDK9 接口中新增的方法
        接口中私有方法的定义格式:
            格式1: priate返回值类型方法名(参数列表){ }
            范例1: private void show(){ }
            格式2: private static返回值类型方法名(参数列表){}
            范例2: private static void method(){ }
    * */

/* 总结
1．接口代表规则，是行为的抽象。想要让哪个类拥有一个行为，就让这个类实现对应的接口就可以了。
2.当一个方法的参数是接口时，可以传递接口所有实现类的对象，这种方式称之为接口多态。
Fly f  #会飞的接口
bird=new Bird()
plane=new Plane()
f=bird
f.fly() #让小鸟飞
f=plane
f.fly() #让飞机飞

 */

    /*
     适配器设计模式：当一个接口中抽象方法过多，但是我只要使用其中一部分的时候，就可以适配器设计模式
     书写步骤:
        1）编写中间类XXXAdapter，实现对应的接口
        2）对接口中的抽象方法进行空实现
        3）让真正的实现类继承中间类，并重写需要用的方法
        4）为了避免其他类创建适配器类的对象，中间的适配器类用abstract进行修饰
    */



}
